function source = define_source_time(Transducer, Transmit, Medium, ...
    Grid, baffle)
%DEFINE_SOURCE_TIME converts GUI output parameter structs into a source
%struct that can be used for the rayleigh integral approach in the time
%domain.
%
% INPUT ARGUMENTS:
% - Transducer is the Transducer struct after calling 
%   get_transducer_integration_points.
% - Transmit is the Transmit structure generated by MainGUI.
% - Medium is the Medium structure generated by MainGUI.
% - Grid is generated by define_grid
% - baffle: 'rigid', 'soft', or 'free'
% 
% RETURNS source, a struct with fields:
% - points:       source points [m], Npoints-by-3
% - delays:       transmit delays [s], Npoints-by-1
% - apod:         transmit apodization, real number 0 to 1, Npoints-by-1
% - samplingrate: sampling rate drive signal {Hz], real positive number
% - vdot:         transducer surface acceleration [Hz], 1-by-Ntimepoints
% - normal:       normal vector at each source point, Npoints-by-3
% - weights:      integration element surface area [m^2], Npoints-by-1
% - baffle:       carrying the input argument baffle
%
% This file is part of the transducer-characterization project, licensed
% under the GNU Lesser General Public License v3.0 (LGPL-3.0).
% See the LICENSE file for further details.
% Copyright (C) 2025 Nathan Blanken

source.points = reshape(Transducer.integration_points,[],3);

rho  = Medium.Density;
c0   = Medium.SpeedOfSound;

% The pressure in the far field is proportional to the derivative of the
% piezo velocity.
v    = Transmit.PressureSignal/(rho*c0);

% Apply electronic delays:
delays = Transducer.integration_transmit_delays;
delays = delays + transpose(Transmit.Delays);

% Apply electronic apodization:
apod   = Transducer.integration_transmit_apodization;
apod   = apod.*transpose(Transmit.Apodization);

source.delays = delays(:);
source.apod   = apod(:);

% Compute transducer surface acceleration:
M    = length(v);
f    = (0:(M-1))/M*Transmit.SamplingRate;
source.vdot = ifft(2i*pi*f.*fft(v),'symmetric');

% Normal vector at each source location pointing into the medium:
source.normal = zeros(size(source.points));
if isfield(Transducer,'Axis')
    source.normal(:,Transducer.Axis) = 1;
else
    source.normal(:,1) = 1;
end

% Area of an integration element:
dA = Grid.dy*Grid.dz*Transducer.integration_weights;
source.weights = dA*ones(size(source.points,1),1);

source.samplingrate = Transmit.SamplingRate;
source.baffle = baffle;

end